			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Valentin  Grigorev valco1994@gmail.com
Boris	  Antonov  mrboruslee@gmail.com

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1)  We solve to store sleeping threads/processes into hashtable, so there were added fields for hash_elem and thread/process awaking time into stuct thread declaration.
  
  struct thread
    {
        ...
        struct hash_elem hash_elem;
        int64_t tick_to_awake;
        ...
    };


2) Declaration of hashtable for sleeping processes was added to thread.h

    struct hash sleeping_hash; 

3)  Our hash function (it uses standart hash_int from src/lib/kernel/hash.h) 

    static unsigned
    hash_func (const struct hash_elem *e, void *aux)
    {
        struct thread *thread = hash_entry(e, struct thread, hash_elem);
        return hash_int(thread->tick_to_awake);
    }

4)  Function for comparison of hash_elem's.
    It's important, that for searching all elem's with some hash was choosed 'magic'
    constant -1, that requires special comprasion way
    
    static bool
    less_func (const struct hash_elem *a, const struct hash_elem *b, void *aux)
    {
        struct thread *thread1 = hash_entry(a, struct thread, hash_elem);
        struct thread *thread2 = hash_entry(b, struct thread, hash_elem);
        if (thread1->tid == -1 || thread2->tid == -1) 
        {
            return thread1->tick_to_awake < thread2->tick_to_awake;
        }
        else
            return thread1->tick_to_awake < thread2->tick_to_awake ||  thread1->tid < thread2->tid; 
    }

5) Hashtable initialization was added into  thread_start. It can't be done earlier, cause 'malloc', that used internally, requires initialized thread system (it was found out during debugging) 
    
    void
    thread_start (void) 
    {
        ...
        hash_init (&sleeping_hash, &hash_func, &less_func, NULL);
    }

6) Thread (that was sent to sleep) is adding into the hashtable for sleeping ones and is blocking

    void
    timer_sleep (int64_t ticks_to_sleep)
    {
        if (ticks_to_sleep > 0)
        {
            ASSERT (intr_get_level () == INTR_ON);
            enum intr_level old_level = intr_disable();
            thread_current()->tick_to_awake = ticks + ticks_to_sleep;
            hash_insert(&sleeping_hash, &thread_current()->hash_elem);
            thread_block();
            intr_set_level(old_level);
        }
    }

7) Threads that should be awaken on this tick are searching into hashtable, adding to the list of ready threads and deleting from hashtable

    static void
    timer_interrupt (struct intr_frame *args UNUSED)
    {
        enum intr_level old_level = intr_disable();
        ticks++;
        thread_tick ();
        struct thread temp;
        temp.tick_to_awake = ticks;
        temp.tid = -1;
        struct hash_elem *toAwake;
        do
        {
            toAwake = hash_find(&sleeping_hash, &temp.hash_elem);
            if (toAwake != NULL)
            {
                struct thread *thread = hash_entry(toAwake, struct thread, hash_elem);
                list_push_back(&ready_list, &thread->elem);
                hash_delete(&sleeping_hash, &thread->hash_elem);
            }
        } while (toAwake != NULL);
        intr_set_level(old_level);
    }


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
